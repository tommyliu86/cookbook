import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as a,c as t,a as e,b as n,d as r,e as i}from"./app-1e620d09.js";const o={},c={href:"https://leetcode.cn/problems/count-pairs-of-nodes/description/",target:"_blank",rel:"noopener noreferrer"},m=i('<h1 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h1><p>题目要获取的是两个点连接的边的数量，如果我们不考虑其他约束和条件，本题其实就是在数组中查找指定数的题目，<br> 一般我们都可以用 <code>双指针</code> 和 <code>二分查找</code> 的方法。</p><p>本题中，需要考虑的是 edge 的计算，我们直接遍历 edges 数组，可以计算出每个点连接的边，而假设 两个点 i、j,<br> 通过 i 的 为 x，通过 j 的为 y，那么 query= x + y 正确吗？ 这里是不一定，原因是 如果 i、j 之间有edge = z 条，<br> 我们的 x + y 中实际把 z 记录了两次，因此我们需要考虑的就是要把 z 修正掉。</p><p>如何修正 z ？ 如果在 <code>双指针</code> 和 <code>二分查找</code> 中就修正，那么 这两种方法就不能使用了，因为 这两个方法都依赖 <code>有序数组</code> ，</p><p>这里可以使用的是先计数，然后再通过遍历 edge 来进行修正。</p><h1 id="解题方法" tabindex="-1"><a class="header-anchor" href="#解题方法" aria-hidden="true">#</a> 解题方法</h1><h3 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h3><ul><li>遍历获取到每个点的边数</li><li>排序后，每个query，可以 <ol><li>从最小开始遍历，每个i，二分查找 query-i 的下标</li><li>大于query的i，后面的直接进行阶乘计算</li></ol></li></ul><h3 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h3><ul><li>排序后，使用双指针<br> 1.双指针遍历，每次考虑的也是单点，不需要二分查找，代码更简单</li></ul><h1 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h1>',11),u={class:"MathJax",jax:"SVG",style:{position:"relative"}},v={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},h=i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1),T=[h],Q=e("mjx-assistive-mml",{unselectable:"on",display:"inline"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"O"),e("mo",{stretchy:"false"},"("),e("mi",null,"n"),e("mo",{stretchy:"false"},")")])],-1),g={class:"MathJax",jax:"SVG",style:{position:"relative"}},b={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},p=i('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1),_=[p],x=e("mjx-assistive-mml",{unselectable:"on",display:"inline"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("mi",null,"O"),e("mo",{stretchy:"false"},"("),e("mn",null,"1"),e("mo",{stretchy:"false"},")")])],-1),f=i(`<h1 id="code" tabindex="-1"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h1><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>
 class Solution {
        public int[] countPairs(int n, int[][] edges, int[] queries) {
            int[] counts=new int[n+1];
            Map&lt;Integer,Integer&gt; edgMap=new HashMap&lt;&gt;();

            for (int i = 0; i &lt; edges.length; i++) {
                for (int i1 : edges[i]) {
                    counts[i1]++;
                }
               int x= Math.min(edges[i][0],edges[i][1]);
               int y= Math.max(edges[i][0],edges[i][1]);
               
                edgMap.merge(x&lt;&lt;16|y,1,Integer::sum);
            }
            int[] origC = Arrays.copyOf(counts, counts.length);
            Arrays.sort(counts);
            int[] ans=new int[queries.length];
            for (int i = 0; i &lt; queries.length; i++) {
                int query = queries[i];
                int x=1,y=n;
                while (x&lt;y){
                    if (counts[x]+counts[y]&gt;query){
                        ans[i]+=y-x;
                        y--;
                    }else{
                        x++;
                    }
                }
                //计算重复边的情况,我们的ans记录的是数对数量，因此如果边不满足情况，则需要减去这个数对
                for (Map.Entry&lt;Integer, Integer&gt; entry : edgMap.entrySet()) {
                    Integer k = entry.getKey();
                    Integer v = entry.getValue();
                    int count = origC[k &gt;&gt; 16] + origC[k &amp; ((int) Math.pow(2, 16) - 1)];
                    if (count &gt; query &amp;&amp; count - v &lt;= query) {
                        ans[i]--;
                    }
                }

            }
            return ans;
        }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function y(w,M){const s=d("ExternalLinkIcon");return a(),t("div",null,[e("blockquote",null,[e("p",null,[n("LeetCode题目: "),e("a",c,[n("1782. 统计点对的数目"),r(s)])])]),m,e("ul",null,[e("li",null,[e("p",null,[n("时间复杂度: "),e("mjx-container",u,[(a(),t("svg",v,T)),Q])])]),e("li",null,[e("p",null,[n("空间复杂度: "),e("mjx-container",g,[(a(),t("svg",b,_)),x])])])]),f])}const k=l(o,[["render",y],["__file","2023年8月23日.html.vue"]]);export{k as default};
